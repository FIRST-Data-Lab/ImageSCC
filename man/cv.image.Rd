% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv.image.R
\name{cv.image}
\alias{cv.image}
\title{Choose triangulation for estimating mean functions via leave-image-out cross-validation}
\usage{
cv.image(Y, Z, d.est = 5, r = 1, V.ests, Tr.ests, lambda, nfold = 10)
}
\arguments{
\item{Y}{a matrix of imaging data, each row corresponding to one subject/image.}

\item{Z}{a 2-column matrix specifying locations of each pixel/voxel.}

\item{d.est}{degree of bivariate spline, default is 5.}

\item{r}{smoothness parameter. Default is 1.}

\item{V.ests}{lists of matrices containing vertices' information of triangulation candidates.}

\item{Tr.ests}{list of 3-column matrices specifying triangles in the triangulation candidates.}

\item{lambda}{the vector of the candidates of penalty parameter.}

\item{nfold}{number of folds in k-fold cross-validation. Default is 10.}
}
\description{
The function selects triangulation for estimating mean function based on leave-image-out cross-validation.
}
\details{
This R package is the implementation program for manuscript entitled "Simultaneous Confidence Corridors for Mean Functions in Functional Data Analysis of Imaging Data" by Yueying Wang, Guannan Wang, Li Wang and R. Todd Ogden.
}
\examples{
# Triangulation information;
data(Brain.V1); data(Brain.Tr1); # triangulation No. 1;
data(Brain.V2); data(Brain.Tr2); # triangulation No. 2;
data(Brain.V3); data(Brain.Tr3); # triangulation No. 3;
V.ests=list(V1=Brain.V1,V2=Brain.V2,V3=Brain.V3);
Tr.ests=list(Tr1=Brain.Tr1,Tr2=Brain.Tr2,Tr3=Brain.Tr3);
# Location information;
n1=40; n2=40;
npix=n1*n2
u1=seq(0,1,length.out=n1)
v1=seq(0,1,length.out=n2)
uu=rep(u1,each=n2)
vv=rep(v1,times=n1)
Z=as.matrix(cbind(uu,vv))
ind.inside=inVT(Brain.V1,Brain.Tr1,Z[,1],Z[,2])$ind.inside
# Parameters for bivariate spline over triangulation;
d.est=5; r=1;
# simulation parameters
n=50; lam1=0.5; lam2=0.2; mu.func=2; noise.type='Func';
lambda=10^{seq(-6,3,0.5)}
dat=data1g.image(n,Z,ind.inside,mu.func,noise.type,lam1,lam2)
Y=dat$Y
tri.est=cv.image(Y,Z,d.est,r,V.ests,Tr.ests,lambda)
tri.est$tri.select; V.est=tri.est$V.est; Tr.est=tri.est$Tr.est;

}
